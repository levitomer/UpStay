let express,routes,reservationsService,serverDev,serverIO,db,axios;_28e‍.w("express",[["default",["express"],function(v){express=v}]]);_28e‍.w("@upstay/routes",[["default",["routes"],function(v){routes=v}]]);_28e‍.w("@upstay/services/reservations",[["*",null,function(v){reservationsService=v}]]);_28e‍.w("./server.dev",[["default",["serverDev"],function(v){serverDev=v}]]);_28e‍.w("./server.io",[["default",["serverIO"],function(v){serverIO=v}]]);_28e‍.w("@upstay/db/reservations",[["*",null,function(v){db=v}]]);_28e‍.w("axios",[["default",["axios"],function(v){axios=v}]]);







const app = express();
const port = process.env.PORT || 9999;
const appURL = `http://localhost:${port}`;

app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(express.static('public'));

app.use(routes);

serverDev(app);

// socket.io server
const server = serverIO(app, socket => {
    const { id } = socket.client;

    console.log(`User connected: ${id}`);
    reservationsService.start(reservation => {
        db.addReservation(reservation);
    });

    const getReservations = async socket => {
        try {
            const res = await axios.get(
                `http://localhost:9999/api/reservations`
            );
            socket.emit('getReservations', res.data);
        } catch (error) {
            console.error(`Error: ${error.code}`);
        }
    };

    socket.on('getReservations', getReservations(socket));
    socket.on('disconnect', () => console.log('User disconnected'));
});

server.listen(port, () => {
    console.log(`Server started ${appURL}`);
});
